<?php
// These stubs were generated by the phan stub generator.
// @phan-stub-for-extension Phar@2.0.2

namespace {
class Phar extends \RecursiveDirectoryIterator implements \Countable, \ArrayAccess {

    // constants
    public const CURRENT_MODE_MASK = 240;
    public const CURRENT_AS_PATHNAME = 32;
    public const CURRENT_AS_FILEINFO = 0;
    public const CURRENT_AS_SELF = 16;
    public const KEY_MODE_MASK = 3840;
    public const KEY_AS_PATHNAME = 0;
    public const FOLLOW_SYMLINKS = 512;
    public const KEY_AS_FILENAME = 256;
    public const NEW_CURRENT_AND_KEY = 256;
    public const OTHER_MODE_MASK = 12288;
    public const SKIP_DOTS = 4096;
    public const UNIX_PATHS = 8192;
    public const BZ2 = 8192;
    public const GZ = 4096;
    public const NONE = 0;
    public const PHAR = 1;
    public const TAR = 2;
    public const ZIP = 3;
    public const COMPRESSED = 61440;
    public const PHP = 0;
    public const PHPS = 1;
    public const MD5 = 1;
    public const OPENSSL = 16;
    public const SHA1 = 2;
    public const SHA256 = 3;
    public const SHA512 = 4;

    // methods
    public function __construct($filename, $flags = NULL, $alias = NULL) {}
    public function __destruct() {}
    public function addEmptyDir($dirname = NULL) {}
    public function addFile($filename, $localname = NULL) {}
    public function addFromString($localname, $contents = NULL) {}
    public function buildFromDirectory($base_dir, $regex = NULL) {}
    public function buildFromIterator($iterator, $base_directory = NULL) {}
    public function compressFiles($compression_type) {}
    public function decompressFiles() {}
    public function compress($compression_type, $file_ext = NULL) {}
    public function decompress($file_ext = NULL) {}
    public function convertToExecutable($format = NULL, $compression_type = NULL, $file_ext = NULL) {}
    public function convertToData($format = NULL, $compression_type = NULL, $file_ext = NULL) {}
    public function copy($newfile, $oldfile) {}
    public function count() {}
    public function delete($entry) {}
    public function delMetadata() {}
    public function extractTo($pathto, $files = NULL, $overwrite = NULL) {}
    public function getAlias() {}
    public function getPath() {}
    public function getMetadata() {}
    public function getModified() {}
    public function getSignature() {}
    public function getStub() {}
    public function getVersion() {}
    public function hasMetadata() {}
    public function isBuffering() {}
    public function isCompressed() {}
    public function isFileFormat($fileformat) {}
    public function isWritable() {}
    public function offsetExists($entry) {}
    public function offsetGet($entry) {}
    public function offsetSet($entry, $value) {}
    public function offsetUnset($entry) {}
    public function setAlias($alias) {}
    public function setDefaultStub($index = NULL, $webindex = NULL) {}
    public function setMetadata($metadata) {}
    public function setSignatureAlgorithm($algorithm, $privatekey = NULL) {}
    public function setStub($newstub, $maxlen = NULL) {}
    public function startBuffering() {}
    public function stopBuffering() {}
    public static function apiVersion() {}
    public static function canCompress($method = NULL) {}
    public static function canWrite() {}
    public static function createDefaultStub($index = NULL, $webindex = NULL) {}
    public static function getSupportedCompression() {}
    public static function getSupportedSignatures() {}
    public static function interceptFileFuncs() {}
    public static function isValidPharFilename($filename, $executable = NULL) {}
    public static function loadPhar($filename, $alias = NULL) {}
    public static function mapPhar($alias = NULL, $offset = NULL) {}
    public static function running($retphar = NULL) {}
    public static function mount($inphar, $externalfile) {}
    public static function mungServer($munglist) {}
    public static function unlinkArchive($archive) {}
    public static function webPhar($alias = NULL, $index = NULL, $f404 = NULL, $mimetypes = NULL, $rewrites = NULL) {}
}

class PharData extends \RecursiveDirectoryIterator implements \Countable, \ArrayAccess {

    // constants
    public const CURRENT_MODE_MASK = 240;
    public const CURRENT_AS_PATHNAME = 32;
    public const CURRENT_AS_FILEINFO = 0;
    public const CURRENT_AS_SELF = 16;
    public const KEY_MODE_MASK = 3840;
    public const KEY_AS_PATHNAME = 0;
    public const FOLLOW_SYMLINKS = 512;
    public const KEY_AS_FILENAME = 256;
    public const NEW_CURRENT_AND_KEY = 256;
    public const OTHER_MODE_MASK = 12288;
    public const SKIP_DOTS = 4096;
    public const UNIX_PATHS = 8192;

    // methods
    public function __construct($filename, $flags = NULL, $alias = NULL, $fileformat = NULL) {}
    public function __destruct() {}
    public function addEmptyDir($dirname = NULL) {}
    public function addFile($filename, $localname = NULL) {}
    public function addFromString($localname, $contents = NULL) {}
    public function buildFromDirectory($base_dir, $regex = NULL) {}
    public function buildFromIterator($iterator, $base_directory = NULL) {}
    public function compressFiles($compression_type) {}
    public function decompressFiles() {}
    public function compress($compression_type, $file_ext = NULL) {}
    public function decompress($file_ext = NULL) {}
    public function convertToExecutable($format = NULL, $compression_type = NULL, $file_ext = NULL) {}
    public function convertToData($format = NULL, $compression_type = NULL, $file_ext = NULL) {}
    public function copy($newfile, $oldfile) {}
    public function count() {}
    public function delete($entry) {}
    public function delMetadata() {}
    public function extractTo($pathto, $files = NULL, $overwrite = NULL) {}
    public function getAlias() {}
    public function getPath() {}
    public function getMetadata() {}
    public function getModified() {}
    public function getSignature() {}
    public function getStub() {}
    public function getVersion() {}
    public function hasMetadata() {}
    public function isBuffering() {}
    public function isCompressed() {}
    public function isFileFormat($fileformat) {}
    public function isWritable() {}
    public function offsetExists($entry) {}
    public function offsetGet($entry) {}
    public function offsetSet($entry, $value) {}
    public function offsetUnset($entry) {}
    public function setAlias($alias) {}
    public function setDefaultStub($index = NULL, $webindex = NULL) {}
    public function setMetadata($metadata) {}
    public function setSignatureAlgorithm($algorithm, $privatekey = NULL) {}
    public function setStub($newstub, $maxlen = NULL) {}
    public function startBuffering() {}
    public function stopBuffering() {}
    public static function apiVersion() {}
    public static function canCompress($method = NULL) {}
    public static function canWrite() {}
    public static function createDefaultStub($index = NULL, $webindex = NULL) {}
    public static function getSupportedCompression() {}
    public static function getSupportedSignatures() {}
    public static function interceptFileFuncs() {}
    public static function isValidPharFilename($filename, $executable = NULL) {}
    public static function loadPhar($filename, $alias = NULL) {}
    public static function mapPhar($alias = NULL, $offset = NULL) {}
    public static function running($retphar = NULL) {}
    public static function mount($inphar, $externalfile) {}
    public static function mungServer($munglist) {}
    public static function unlinkArchive($archive) {}
    public static function webPhar($alias = NULL, $index = NULL, $f404 = NULL, $mimetypes = NULL, $rewrites = NULL) {}
}

class PharException extends \Exception {

    // properties
    public $message;
    public $code;
    public $file;
    public $line;
}

class PharFileInfo extends \SplFileInfo {

    // methods
    public function __construct($filename) {}
    public function __destruct() {}
    public function chmod($perms) {}
    public function compress($compression_type) {}
    public function decompress() {}
    public function delMetadata() {}
    public function getCompressedSize() {}
    public function getCRC32() {}
    public function getContent() {}
    public function getMetadata() {}
    public function getPharFlags() {}
    public function hasMetadata() {}
    public function isCompressed($compression_type = NULL) {}
    public function isCRCChecked() {}
    public function setMetadata($metadata) {}
}

}
