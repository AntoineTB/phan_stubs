<?php
// These stubs were generated by the phan stub generator.
// @phan-stub-for-extension SPL@7.1.10

namespace {
class AppendIterator extends \IteratorIterator {

    // methods
    public function __construct() {}
    public function append(\Iterator $iterator) {}
    public function rewind() {}
    public function valid() {}
    public function key() {}
    public function current() {}
    public function next() {}
    public function getInnerIterator() {}
    public function getIteratorIndex() {}
    public function getArrayIterator() {}
}

class ArrayIterator implements \Iterator, \Traversable, \ArrayAccess, \SeekableIterator, \Serializable, \Countable {

    // constants
    public const STD_PROP_LIST = 1;
    public const ARRAY_AS_PROPS = 2;

    // properties
    public $name;

    // methods
    public function __construct($array = NULL, $ar_flags = NULL, $iterator_class = NULL) {}
    public function offsetExists($index) {}
    public function offsetGet($index) {}
    public function offsetSet($index, $newval) {}
    public function offsetUnset($index) {}
    public function append($value) {}
    public function getArrayCopy() {}
    public function count() {}
    public function getFlags() {}
    public function setFlags($flags) {}
    public function asort() {}
    public function ksort() {}
    public function uasort($cmp_function) {}
    public function uksort($cmp_function) {}
    public function natsort() {}
    public function natcasesort() {}
    public function unserialize($serialized) {}
    public function serialize() {}
    public function rewind() {}
    public function current() {}
    public function key() {}
    public function next() {}
    public function valid() {}
    public function seek($position) {}
}

class ArrayObject implements \IteratorAggregate, \Traversable, \ArrayAccess, \Serializable, \Countable {

    // constants
    public const STD_PROP_LIST = 1;
    public const ARRAY_AS_PROPS = 2;

    // properties
    public $name;

    // methods
    public function __construct($array = NULL, $ar_flags = NULL, $iterator_class = NULL) {}
    public function offsetExists($index) {}
    public function offsetGet($index) {}
    public function offsetSet($index, $newval) {}
    public function offsetUnset($index) {}
    public function append($value) {}
    public function getArrayCopy() {}
    public function count() {}
    public function getFlags() {}
    public function setFlags($flags) {}
    public function asort() {}
    public function ksort() {}
    public function uasort($cmp_function) {}
    public function uksort($cmp_function) {}
    public function natsort() {}
    public function natcasesort() {}
    public function unserialize($serialized) {}
    public function serialize() {}
    public function getIterator() {}
    public function exchangeArray($array) {}
    public function setIteratorClass($iteratorClass) {}
    public function getIteratorClass() {}
}

class BadFunctionCallException extends \LogicException {

    // properties
    public $message;
    public $code;
    public $file;
    public $line;
}

class BadMethodCallException extends \BadFunctionCallException {

    // properties
    public $message;
    public $code;
    public $file;
    public $line;
}

class CachingIterator extends \IteratorIterator implements \ArrayAccess, \Countable {

    // constants
    public const CALL_TOSTRING = 1;
    public const CATCH_GET_CHILD = 16;
    public const TOSTRING_USE_KEY = 2;
    public const TOSTRING_USE_CURRENT = 4;
    public const TOSTRING_USE_INNER = 8;
    public const FULL_CACHE = 256;

    // methods
    public function __construct(\Iterator $iterator, $flags = NULL) {}
    public function rewind() {}
    public function valid() {}
    public function key() {}
    public function current() {}
    public function next() {}
    public function hasNext() {}
    public function __toString() {}
    public function getInnerIterator() {}
    public function getFlags() {}
    public function setFlags($flags) {}
    public function offsetGet($index) {}
    public function offsetSet($index, $newval) {}
    public function offsetUnset($index) {}
    public function offsetExists($index) {}
    public function getCache() {}
    public function count() {}
}

class CallbackFilterIterator extends \FilterIterator {

    // methods
    public function __construct(\Iterator $iterator, $callback) {}
    public function accept() {}
}

interface Countable {

    // methods
    public abstract function count();
}

class DirectoryIterator extends \SplFileInfo implements \Iterator, \Traversable, \SeekableIterator {

    // properties
    public $name;

    // methods
    public function __construct($path) {}
    public function getFilename() {}
    public function getExtension() {}
    public function getBasename($suffix = NULL) {}
    public function isDot() {}
    public function rewind() {}
    public function valid() {}
    public function key() {}
    public function current() {}
    public function next() {}
    public function seek($position) {}
    public function __toString() {}
}

class DomainException extends \LogicException {

    // properties
    public $message;
    public $code;
    public $file;
    public $line;
}

class EmptyIterator implements \Iterator, \Traversable {

    // methods
    public function rewind() {}
    public function valid() {}
    public function key() {}
    public function current() {}
    public function next() {}
}

class FilesystemIterator extends \DirectoryIterator {

    // constants
    public const CURRENT_MODE_MASK = 240;
    public const CURRENT_AS_PATHNAME = 32;
    public const CURRENT_AS_FILEINFO = 0;
    public const CURRENT_AS_SELF = 16;
    public const KEY_MODE_MASK = 3840;
    public const KEY_AS_PATHNAME = 0;
    public const FOLLOW_SYMLINKS = 512;
    public const KEY_AS_FILENAME = 256;
    public const NEW_CURRENT_AND_KEY = 256;
    public const OTHER_MODE_MASK = 12288;
    public const SKIP_DOTS = 4096;
    public const UNIX_PATHS = 8192;

    // methods
    public function __construct($path, $flags = NULL) {}
    public function rewind() {}
    public function next() {}
    public function key() {}
    public function current() {}
    public function getFlags() {}
    public function setFlags($flags = NULL) {}
}

abstract class FilterIterator extends \IteratorIterator {

    // properties
    public $name;

    // methods
    public function __construct(\Iterator $iterator) {}
    public function rewind() {}
    public function valid() {}
    public function key() {}
    public function current() {}
    public function next() {}
    public function getInnerIterator() {}
    public abstract function accept();
}

class GlobIterator extends \FilesystemIterator implements \Countable {

    // constants
    public const CURRENT_MODE_MASK = 240;
    public const CURRENT_AS_PATHNAME = 32;
    public const CURRENT_AS_FILEINFO = 0;
    public const CURRENT_AS_SELF = 16;
    public const KEY_MODE_MASK = 3840;
    public const KEY_AS_PATHNAME = 0;
    public const FOLLOW_SYMLINKS = 512;
    public const KEY_AS_FILENAME = 256;
    public const NEW_CURRENT_AND_KEY = 256;
    public const OTHER_MODE_MASK = 12288;
    public const SKIP_DOTS = 4096;
    public const UNIX_PATHS = 8192;

    // methods
    public function __construct($path, $flags = NULL) {}
    public function count() {}
}

class InfiniteIterator extends \IteratorIterator {

    // methods
    public function __construct(\Iterator $iterator) {}
    public function next() {}
}

class InvalidArgumentException extends \LogicException {

    // properties
    public $message;
    public $code;
    public $file;
    public $line;
}

class IteratorIterator implements \Iterator, \Traversable, \OuterIterator {

    // methods
    public function __construct(\Traversable $iterator) {}
    public function rewind() {}
    public function valid() {}
    public function key() {}
    public function current() {}
    public function next() {}
    public function getInnerIterator() {}
}

class LengthException extends \LogicException {

    // properties
    public $message;
    public $code;
    public $file;
    public $line;
}

class LimitIterator extends \IteratorIterator {

    // properties
    public $name;

    // methods
    public function __construct(\Iterator $iterator, $offset = NULL, $count = NULL) {}
    public function rewind() {}
    public function valid() {}
    public function key() {}
    public function current() {}
    public function next() {}
    public function seek($position) {}
    public function getPosition() {}
    public function getInnerIterator() {}
}

class LogicException extends \Exception {

    // properties
    public $message;
    public $code;
    public $file;
    public $line;
}

class MultipleIterator implements \Iterator, \Traversable {

    // constants
    public const MIT_NEED_ANY = 0;
    public const MIT_NEED_ALL = 1;
    public const MIT_KEYS_NUMERIC = 0;
    public const MIT_KEYS_ASSOC = 2;

    // methods
    public function __construct($flags) {}
    public function getFlags() {}
    public function setFlags($flags) {}
    public function attachIterator(\Iterator $iterator, $infos = NULL) {}
    public function detachIterator(\Iterator $iterator) {}
    public function containsIterator(\Iterator $iterator) {}
    public function countIterators() {}
    public function rewind() {}
    public function valid() {}
    public function key() {}
    public function current() {}
    public function next() {}
}

class NoRewindIterator extends \IteratorIterator {

    // properties
    public $name;

    // methods
    public function __construct(\Iterator $iterator) {}
    public function rewind() {}
    public function valid() {}
    public function key() {}
    public function current() {}
    public function next() {}
    public function getInnerIterator() {}
}

class OutOfBoundsException extends \RuntimeException {

    // properties
    public $message;
    public $code;
    public $file;
    public $line;
}

class OutOfRangeException extends \LogicException {

    // properties
    public $message;
    public $code;
    public $file;
    public $line;
}

interface OuterIterator extends \Iterator, \Traversable {

    // methods
    public abstract function getInnerIterator();
}

class OverflowException extends \RuntimeException {

    // properties
    public $message;
    public $code;
    public $file;
    public $line;
}

class ParentIterator extends \RecursiveFilterIterator {

    // properties
    public $name;

    // methods
    public function __construct(\RecursiveIterator $iterator) {}
    public function accept() {}
}

class RangeException extends \RuntimeException {

    // properties
    public $message;
    public $code;
    public $file;
    public $line;
}

class RecursiveArrayIterator extends \ArrayIterator implements \RecursiveIterator {

    // constants
    public const CHILD_ARRAYS_ONLY = 4;

    // properties
    public $name;

    // methods
    public function hasChildren() {}
    public function getChildren() {}
}

class RecursiveCachingIterator extends \CachingIterator implements \RecursiveIterator {

    // constants
    public const CALL_TOSTRING = 1;
    public const CATCH_GET_CHILD = 16;
    public const TOSTRING_USE_KEY = 2;
    public const TOSTRING_USE_CURRENT = 4;
    public const TOSTRING_USE_INNER = 8;
    public const FULL_CACHE = 256;

    // properties
    public $name;

    // methods
    public function __construct(\Iterator $iterator, $flags = NULL) {}
    public function hasChildren() {}
    public function getChildren() {}
}

class RecursiveCallbackFilterIterator extends \CallbackFilterIterator implements \RecursiveIterator {

    // methods
    public function __construct(\RecursiveIterator $iterator, $callback) {}
    public function hasChildren() {}
    public function getChildren() {}
}

class RecursiveDirectoryIterator extends \FilesystemIterator implements \RecursiveIterator {

    // constants
    public const CURRENT_MODE_MASK = 240;
    public const CURRENT_AS_PATHNAME = 32;
    public const CURRENT_AS_FILEINFO = 0;
    public const CURRENT_AS_SELF = 16;
    public const KEY_MODE_MASK = 3840;
    public const KEY_AS_PATHNAME = 0;
    public const FOLLOW_SYMLINKS = 512;
    public const KEY_AS_FILENAME = 256;
    public const NEW_CURRENT_AND_KEY = 256;
    public const OTHER_MODE_MASK = 12288;
    public const SKIP_DOTS = 4096;
    public const UNIX_PATHS = 8192;

    // properties
    public $name;

    // methods
    public function __construct($path, $flags = NULL) {}
    public function hasChildren($allow_links = NULL) {}
    public function getChildren() {}
    public function getSubPath() {}
    public function getSubPathname() {}
}

abstract class RecursiveFilterIterator extends \FilterIterator implements \RecursiveIterator {

    // methods
    public function __construct(\RecursiveIterator $iterator) {}
    public function hasChildren() {}
    public function getChildren() {}
}

interface RecursiveIterator extends \Iterator, \Traversable {

    // methods
    public abstract function hasChildren();
    public abstract function getChildren();
}

class RecursiveIteratorIterator implements \Iterator, \Traversable, \OuterIterator {

    // constants
    public const LEAVES_ONLY = 0;
    public const SELF_FIRST = 1;
    public const CHILD_FIRST = 2;
    public const CATCH_GET_CHILD = 16;

    // methods
    public function __construct(\Traversable $iterator, $mode = NULL, $flags = NULL) {}
    public function rewind() {}
    public function valid() {}
    public function key() {}
    public function current() {}
    public function next() {}
    public function getDepth() {}
    public function getSubIterator($level = NULL) {}
    public function getInnerIterator() {}
    public function beginIteration() {}
    public function endIteration() {}
    public function callHasChildren() {}
    public function callGetChildren() {}
    public function beginChildren() {}
    public function endChildren() {}
    public function nextElement() {}
    public function setMaxDepth($max_depth = NULL) {}
    public function getMaxDepth() {}
}

class RecursiveRegexIterator extends \RegexIterator implements \RecursiveIterator {

    // constants
    public const USE_KEY = 1;
    public const INVERT_MATCH = 2;
    public const MATCH = 0;
    public const GET_MATCH = 1;
    public const ALL_MATCHES = 2;
    public const SPLIT = 3;
    public const REPLACE = 4;

    // properties
    public $name;
    public $replacement;

    // methods
    public function __construct(\RecursiveIterator $iterator, $regex, $mode = NULL, $flags = NULL, $preg_flags = NULL) {}
    public function accept() {}
    public function hasChildren() {}
    public function getChildren() {}
}

class RecursiveTreeIterator extends \RecursiveIteratorIterator {

    // constants
    public const LEAVES_ONLY = 0;
    public const SELF_FIRST = 1;
    public const CHILD_FIRST = 2;
    public const CATCH_GET_CHILD = 16;
    public const BYPASS_CURRENT = 4;
    public const BYPASS_KEY = 8;
    public const PREFIX_LEFT = 0;
    public const PREFIX_MID_HAS_NEXT = 1;
    public const PREFIX_MID_LAST = 2;
    public const PREFIX_END_HAS_NEXT = 3;
    public const PREFIX_END_LAST = 4;
    public const PREFIX_RIGHT = 5;

    // methods
    public function __construct(\Traversable $iterator, $flags = NULL, $caching_it_flags = NULL, $mode = NULL) {}
    public function rewind() {}
    public function valid() {}
    public function key() {}
    public function current() {}
    public function next() {}
    public function beginIteration() {}
    public function endIteration() {}
    public function callHasChildren() {}
    public function callGetChildren() {}
    public function beginChildren() {}
    public function endChildren() {}
    public function nextElement() {}
    public function getPrefix() {}
    public function setPrefixPart($part, $value) {}
    public function getEntry() {}
    public function setPostfix() {}
    public function getPostfix() {}
}

class RegexIterator extends \FilterIterator {

    // constants
    public const USE_KEY = 1;
    public const INVERT_MATCH = 2;
    public const MATCH = 0;
    public const GET_MATCH = 1;
    public const ALL_MATCHES = 2;
    public const SPLIT = 3;
    public const REPLACE = 4;

    // properties
    public $name;
    public $replacement;

    // methods
    public function __construct(\Iterator $iterator, $regex, $mode = NULL, $flags = NULL, $preg_flags = NULL) {}
    public function accept() {}
    public function getMode() {}
    public function setMode($mode) {}
    public function getFlags() {}
    public function setFlags($flags) {}
    public function getPregFlags() {}
    public function setPregFlags($preg_flags) {}
    public function getRegex() {}
}

class RuntimeException extends \Exception {

    // properties
    public $message;
    public $code;
    public $file;
    public $line;
}

interface SeekableIterator extends \Iterator, \Traversable {

    // methods
    public abstract function seek($position);
}

class SplDoublyLinkedList implements \Iterator, \Traversable, \Countable, \ArrayAccess, \Serializable {

    // constants
    public const IT_MODE_LIFO = 2;
    public const IT_MODE_FIFO = 0;
    public const IT_MODE_DELETE = 1;
    public const IT_MODE_KEEP = 0;

    // properties
    public $name;

    // methods
    public function pop() {}
    public function shift() {}
    public function push($value) {}
    public function unshift($value) {}
    public function top() {}
    public function bottom() {}
    public function isEmpty() {}
    public function setIteratorMode($flags) {}
    public function getIteratorMode() {}
    public function count() {}
    public function offsetExists($index) {}
    public function offsetGet($index) {}
    public function offsetSet($index, $newval) {}
    public function offsetUnset($index) {}
    public function add($index, $newval) {}
    public function rewind() {}
    public function current() {}
    public function key() {}
    public function next() {}
    public function prev() {}
    public function valid() {}
    public function unserialize($serialized) {}
    public function serialize() {}
}

class SplFileInfo {

    // methods
    public function __construct($file_name) {}
    public function getPath() {}
    public function getFilename() {}
    public function getExtension() {}
    public function getBasename($suffix = NULL) {}
    public function getPathname() {}
    public function getPerms() {}
    public function getInode() {}
    public function getSize() {}
    public function getOwner() {}
    public function getGroup() {}
    public function getATime() {}
    public function getMTime() {}
    public function getCTime() {}
    public function getType() {}
    public function isWritable() {}
    public function isReadable() {}
    public function isExecutable() {}
    public function isFile() {}
    public function isDir() {}
    public function isLink() {}
    public function getLinkTarget() {}
    public function getRealPath() {}
    public function getFileInfo($class_name = NULL) {}
    public function getPathInfo($class_name = NULL) {}
    public function openFile($open_mode = NULL, $use_include_path = NULL, $context = NULL) {}
    public function setFileClass($class_name = NULL) {}
    public function setInfoClass($class_name = NULL) {}
    public function _bad_state_ex() {}
    public function __toString() {}
}

class SplFileObject extends \SplFileInfo implements \RecursiveIterator, \Traversable, \Iterator, \SeekableIterator {

    // constants
    public const DROP_NEW_LINE = 1;
    public const READ_AHEAD = 2;
    public const SKIP_EMPTY = 4;
    public const READ_CSV = 8;

    // methods
    public function __construct($file_name, $open_mode = NULL, $use_include_path = NULL, $context = NULL) {}
    public function rewind() {}
    public function eof() {}
    public function valid() {}
    public function fgets() {}
    public function fgetcsv($delimiter = NULL, $enclosure = NULL, $escape = NULL) {}
    public function fputcsv($fields, $delimiter = NULL, $enclosure = NULL, $escape = NULL) {}
    public function setCsvControl($delimiter = NULL, $enclosure = NULL, $escape = NULL) {}
    public function getCsvControl() {}
    public function flock($operation, &$wouldblock = NULL) {}
    public function fflush() {}
    public function ftell() {}
    public function fseek($pos, $whence = NULL) {}
    public function fgetc() {}
    public function fpassthru() {}
    public function fgetss($allowable_tags = NULL) {}
    public function fscanf($format, &...$vars) {}
    public function fwrite($str, $length = NULL) {}
    public function fread($length) {}
    public function fstat() {}
    public function ftruncate($size) {}
    public function current() {}
    public function key() {}
    public function next() {}
    public function setFlags($flags) {}
    public function getFlags() {}
    public function setMaxLineLen($max_len) {}
    public function getMaxLineLen() {}
    public function hasChildren() {}
    public function getChildren() {}
    public function seek($line_pos) {}
    public function getCurrentLine() {}
    public function __toString() {}
}

class SplFixedArray implements \Iterator, \Traversable, \ArrayAccess, \Countable {

    // methods
    public function __construct($size = NULL) {}
    public function __wakeup() {}
    public function count() {}
    public function toArray() {}
    public static function fromArray($data, $save_indexes = NULL) {}
    public function getSize() {}
    public function setSize($value) {}
    public function offsetExists($index) {}
    public function offsetGet($index) {}
    public function offsetSet($index, $newval) {}
    public function offsetUnset($index) {}
    public function rewind() {}
    public function current() {}
    public function key() {}
    public function next() {}
    public function valid() {}
}

abstract class SplHeap implements \Iterator, \Traversable, \Countable {

    // properties
    public $name;

    // methods
    public function extract() {}
    public function insert($value) {}
    public function top() {}
    public function count() {}
    public function isEmpty() {}
    public function rewind() {}
    public function current() {}
    public function key() {}
    public function next() {}
    public function valid() {}
    public function recoverFromCorruption() {}
    public function isCorrupted() {}
    protected abstract function compare();
}

class SplMaxHeap extends \SplHeap {

    // properties
    public $name;

    // methods
    protected function compare($a, $b) {}
}

class SplMinHeap extends \SplHeap {

    // properties
    public $name;

    // methods
    protected function compare($a, $b) {}
}

class SplObjectStorage implements \Countable, \Iterator, \Traversable, \Serializable, \ArrayAccess {

    // methods
    public function attach($object, $inf = NULL) {}
    public function detach($object) {}
    public function contains($object) {}
    public function addAll($object) {}
    public function removeAll($object) {}
    public function removeAllExcept($object) {}
    public function getInfo() {}
    public function setInfo($info) {}
    public function getHash($object) {}
    public function count() {}
    public function rewind() {}
    public function valid() {}
    public function key() {}
    public function current() {}
    public function next() {}
    public function unserialize($serialized) {}
    public function serialize() {}
    public function offsetExists($object) {}
    public function offsetSet($object, $inf = NULL) {}
    public function offsetUnset($object) {}
    public function offsetGet($object) {}
}

interface SplObserver {

    // methods
    public abstract function update(\SplSubject $SplSubject);
}

class SplPriorityQueue implements \Iterator, \Traversable, \Countable {

    // constants
    public const EXTR_BOTH = 3;
    public const EXTR_PRIORITY = 2;
    public const EXTR_DATA = 1;

    // properties
    public $name;

    // methods
    public function compare($a, $b) {}
    public function insert($value, $priority) {}
    public function setExtractFlags($flags) {}
    public function getExtractFlags() {}
    public function top() {}
    public function extract() {}
    public function count() {}
    public function isEmpty() {}
    public function rewind() {}
    public function current() {}
    public function key() {}
    public function next() {}
    public function valid() {}
    public function recoverFromCorruption() {}
    public function isCorrupted() {}
}

class SplQueue extends \SplDoublyLinkedList {

    // constants
    public const IT_MODE_LIFO = 2;
    public const IT_MODE_FIFO = 0;
    public const IT_MODE_DELETE = 1;
    public const IT_MODE_KEEP = 0;

    // properties
    public $name;

    // methods
    public function enqueue($value) {}
    public function dequeue() {}
}

class SplStack extends \SplDoublyLinkedList {

    // constants
    public const IT_MODE_LIFO = 2;
    public const IT_MODE_FIFO = 0;
    public const IT_MODE_DELETE = 1;
    public const IT_MODE_KEEP = 0;

    // properties
    public $name;
}

interface SplSubject {

    // methods
    public abstract function attach(\SplObserver $SplObserver);
    public abstract function detach(\SplObserver $SplObserver);
    public abstract function notify();
}

class SplTempFileObject extends \SplFileObject {

    // constants
    public const DROP_NEW_LINE = 1;
    public const READ_AHEAD = 2;
    public const SKIP_EMPTY = 4;
    public const READ_CSV = 8;

    // methods
    public function __construct($max_memory = NULL) {}
}

class UnderflowException extends \RuntimeException {

    // properties
    public $message;
    public $code;
    public $file;
    public $line;
}

class UnexpectedValueException extends \RuntimeException {

    // properties
    public $message;
    public $code;
    public $file;
    public $line;
}

function class_implements($what, $autoload = NULL) {}
function class_parents($instance, $autoload = NULL) {}
function class_uses($what, $autoload = NULL) {}
function iterator_apply(\Traversable $iterator, $function, array $args = NULL) {}
function iterator_count(\Traversable $iterator) {}
function iterator_to_array(\Traversable $iterator, $use_keys = NULL) {}
function spl_autoload($class_name, $file_extensions = NULL) {}
function spl_autoload_call($class_name) {}
function spl_autoload_extensions($file_extensions = NULL) {}
function spl_autoload_functions() {}
function spl_autoload_register($autoload_function = NULL, $throw = NULL, $prepend = NULL) {}
function spl_autoload_unregister($autoload_function) {}
function spl_classes() {}
function spl_object_hash($obj) {}
}
