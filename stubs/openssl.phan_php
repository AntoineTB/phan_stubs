<?php
// These stubs were generated by the phan stub generator.
// @phan-stub-for-extension openssl@7.1.10

namespace {
function openssl_cipher_iv_length($method) {}
function openssl_csr_export($csr, &$out, $notext = NULL) {}
function openssl_csr_export_to_file($csr, $outfilename, $notext = NULL) {}
function openssl_csr_get_public_key($csr) {}
function openssl_csr_get_subject($csr) {}
function openssl_csr_new($dn, &$privkey, $configargs = NULL, $extraattribs = NULL) {}
function openssl_csr_sign($csr, $x509, $priv_key, $days, $config_args = NULL, $serial = NULL) {}
function openssl_decrypt($data, $method, $password, $options = NULL, $iv = NULL, $tag = NULL, $aad = NULL) {}
function openssl_dh_compute_key($pub_key, $dh_key) {}
function openssl_digest($data, $method, $raw_output = NULL) {}
function openssl_encrypt($data, $method, $password, $options = NULL, $iv = NULL, &$tag = NULL, $aad = NULL, $tag_length = NULL) {}
function openssl_error_string() {}
function openssl_free_key($key) {}
function openssl_get_cert_locations() {}
function openssl_get_cipher_methods($aliases = NULL) {}
function openssl_get_curve_names() {}
function openssl_get_md_methods($aliases = NULL) {}
function openssl_get_privatekey($key, $passphrase = NULL) {}
function openssl_get_publickey($cert) {}
function openssl_open($data, &$opendata, $ekey, $privkey, $iv) {}
function openssl_pbkdf2($password, $salt, $key_length, $iterations, $digest_algorithm = NULL) {}
function openssl_pkcs7_decrypt($infilename, $outfilename, $recipcert, $recipkey = NULL) {}
function openssl_pkcs7_encrypt($infile, $outfile, $recipcerts, $headers, $flags = NULL, $cipher = NULL) {}
function openssl_pkcs7_sign($infile, $outfile, $signcert, $signkey, $headers, $flags = NULL, $extracertsfilename = NULL) {}
function openssl_pkcs7_verify($filename, $flags, $signerscerts = NULL, $cainfo = NULL, $extracerts = NULL, $content = NULL) {}
function openssl_pkcs12_export($x509, &$out, $priv_key, $pass, $args) {}
function openssl_pkcs12_export_to_file($x509, $filename, $priv_key, $pass, $args = NULL) {}
function openssl_pkcs12_read($PKCS12, &$certs, $pass) {}
function openssl_pkey_export($key, &$out, $passphrase = NULL, $config_args = NULL) {}
function openssl_pkey_export_to_file($key, $outfilename, $passphrase = NULL, $config_args = NULL) {}
function openssl_pkey_free($key) {}
function openssl_pkey_get_details($key) {}
function openssl_pkey_get_private($key, $passphrase = NULL) {}
function openssl_pkey_get_public($cert) {}
function openssl_pkey_new($configargs = NULL) {}
function openssl_private_decrypt($data, &$crypted, $key, $padding = NULL) {}
function openssl_private_encrypt($data, &$crypted, $key, $padding = NULL) {}
function openssl_public_decrypt($data, &$crypted, $key, $padding = NULL) {}
function openssl_public_encrypt($data, &$crypted, $key, $padding = NULL) {}
function openssl_random_pseudo_bytes($length, &$result_is_strong = NULL) {}
function openssl_seal($data, &$sealdata, &$ekeys, $pubkeys, $method = NULL, &$iv = NULL) {}
function openssl_sign($data, &$signature, $key, $method = NULL) {}
function openssl_spki_export($spki) {}
function openssl_spki_export_challenge($spki) {}
function openssl_spki_new($privkey, $challenge, $algo = NULL) {}
function openssl_spki_verify($spki) {}
function openssl_verify($data, $signature, $key, $method = NULL) {}
function openssl_x509_check_private_key($cert, $key) {}
function openssl_x509_checkpurpose($x509cert, $purpose, $cainfo, $untrustedfile = NULL) {}
function openssl_x509_export($x509, &$out, $notext = NULL) {}
function openssl_x509_export_to_file($x509, $outfilename, $notext = NULL) {}
function openssl_x509_fingerprint($x509, $method = NULL, $raw_output = NULL) {}
function openssl_x509_free($x509) {}
function openssl_x509_parse($x509, $shortname) {}
function openssl_x509_read($cert) {}
const OPENSSL_ALGO_DSS1 = 5;
const OPENSSL_ALGO_MD4 = 3;
const OPENSSL_ALGO_MD5 = 2;
const OPENSSL_ALGO_RMD160 = 10;
const OPENSSL_ALGO_SHA1 = 1;
const OPENSSL_ALGO_SHA224 = 6;
const OPENSSL_ALGO_SHA256 = 7;
const OPENSSL_ALGO_SHA384 = 8;
const OPENSSL_ALGO_SHA512 = 9;
const OPENSSL_CIPHER_3DES = 4;
const OPENSSL_CIPHER_AES_128_CBC = 5;
const OPENSSL_CIPHER_AES_192_CBC = 6;
const OPENSSL_CIPHER_AES_256_CBC = 7;
const OPENSSL_CIPHER_DES = 3;
const OPENSSL_CIPHER_RC2_40 = 0;
const OPENSSL_CIPHER_RC2_64 = 2;
const OPENSSL_CIPHER_RC2_128 = 1;
const OPENSSL_DEFAULT_STREAM_CIPHERS = 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128:AES256:HIGH:!SSLv2:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!RC4:!ADH';
const OPENSSL_DONT_ZERO_PAD_KEY = 4;
const OPENSSL_KEYTYPE_DH = 2;
const OPENSSL_KEYTYPE_DSA = 1;
const OPENSSL_KEYTYPE_EC = 3;
const OPENSSL_KEYTYPE_RSA = 0;
const OPENSSL_NO_PADDING = 3;
const OPENSSL_PKCS1_OAEP_PADDING = 4;
const OPENSSL_PKCS1_PADDING = 1;
const OPENSSL_RAW_DATA = 1;
const OPENSSL_SSLV23_PADDING = 2;
const OPENSSL_TLSEXT_SERVER_NAME = 1;
const OPENSSL_VERSION_NUMBER = 268439887;
const OPENSSL_VERSION_TEXT = 'OpenSSL 1.0.1t  3 May 2016';
const OPENSSL_ZERO_PADDING = 2;
const PKCS7_BINARY = 128;
const PKCS7_DETACHED = 64;
const PKCS7_NOATTR = 256;
const PKCS7_NOCERTS = 2;
const PKCS7_NOCHAIN = 8;
const PKCS7_NOINTERN = 16;
const PKCS7_NOSIGS = 4;
const PKCS7_NOVERIFY = 32;
const PKCS7_TEXT = 1;
const X509_PURPOSE_ANY = 7;
const X509_PURPOSE_CRL_SIGN = 6;
const X509_PURPOSE_NS_SSL_SERVER = 3;
const X509_PURPOSE_SMIME_ENCRYPT = 5;
const X509_PURPOSE_SMIME_SIGN = 4;
const X509_PURPOSE_SSL_CLIENT = 1;
const X509_PURPOSE_SSL_SERVER = 2;
}
